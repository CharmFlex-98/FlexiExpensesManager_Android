plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'com.google.devtools.ksp'

    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.google.services)
    alias(libs.plugins.google.firebase.crashlytics.plugin)
    alias(libs.plugins.kotlin.serialization.plugin)
    alias(libs.plugins.room.gradle.plugin)
}

android {
    namespace 'com.charmflex.flexiexpensesmanager'
    compileSdk 34

    defaultConfig {
        applicationId "com.charmflex.flexiexpensesmanager"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions = ["dimension"]

    productFlavors {
        dev {
            resValue "string", "app_name", "FlexiExpensesManagerDev"
            dimension("dimension")
            applicationIdSuffix(".dev")
            buildConfigField("String", "BASE_URL", "\"http://10.0.2.2:3000\"")
        }

        mock {
            dimension("dimension")
            applicationIdSuffix(".mock")
            buildConfigField("String", "BASE_URL", "\"http://localhost:56789\"")
        }

        prod {
            resValue "string", "app_name", "Flexi Expenses Manager"
            dimension "dimension"
            buildConfigField("String", "BASE_URL", "\"https://app.charmflex.com\"")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
                "-P",
                "plugin:androidx.compose.compiler.plugins.kotlin:stabilityConfigurationPath=" +
                        layout.projectDirectory.file("compose_compiler_config.conf").asFile.absolutePath,
                "-P",
                "plugin:androidx.compose.compiler.plugins.kotlin:experimentalStrongSkipping=true",
        ]
    }

    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.composeCompilerVersion.get()
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    room {
        schemaDirectory "$projectDir/schemas"
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.0')
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation platform('androidx.compose:compose-bom:2024.06.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3:1.2.0-alpha11'
    implementation libs.androidx.ui.text.google.fonts
//    testImplementation 'junit:junit:4.13.2'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
//    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
//    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    implementation(libs.kotlin.serialization)
    implementation(libs.squareup.moshi)
    ksp(libs.moshi.kotlin.codegen)

    // Compose Navigation
    implementation(libs.compose.navigation)

    // Chart library
    implementation(libs.aay.chart)

    // Compose Calendar
    implementation(libs.compose.calendar)

//    // Activity
//    implementation(libs.activity.ktx)
//
//    // Fragment
//    implementation(libs.fragment.ktx)

    // ViewModel
    implementation(libs.lifecycle.viewModel.ktx)
    implementation(libs.lifecycle.viewModel.compose)

    // Accompanist
    implementation(libs.google.accompanist)

    // Room
    implementation(libs.android.room)
    ksp(libs.android.room.compiler)
    implementation(libs.android.room.ktx)

    // Network
    implementation(platform(libs.square.okhttp3.bom))
    implementation(libs.square.okhttp3.loggingInterceptor)
    implementation(libs.square.okhttp.tls)
    implementation(libs.square.okhttp3)
    implementation(libs.square.retrofit)
    implementation(libs.square.retrofit.moshiConverter)

    // Excel
    implementation(libs.apache.poi)
    implementation(libs.apache.poi.ooxml)

    // Dagger
    implementation(libs.google.dagger)
    kapt(libs.google.daggerAP)

    // Lottie
    implementation(libs.airbnb.lottie.compose)

    // Vico
    implementation(libs.vico.compose.m3)
    implementation(libs.vico.core)

    // Dialog
    implementation(libs.skydoves.balloon)
    implementation(libs.compose.dialog.state)
    implementation(libs.compose.dialog.calendar)
    implementation(libs.compose.dialog.clock)
    implementation(libs.compose.dialog.state)
    implementation(libs.coil)

    // firebase
    implementation(platform(libs.google.firebase.bom))
    implementation(libs.google.firebase.crashlytics)
    implementation(libs.google.firebase.analytics)
    implementation(libs.google.identity.id)
    implementation(libs.androidx.credentials)
    implementation(libs.androidx.play.services.auth)
    implementation(libs.google.firebase.auth)

    // security
    implementation(libs.androidx.security.crypto)

    // work manager
    implementation(libs.work.manager)

    // Google

}